-https://github.com/iamumairr/CustomIdentity/blob/master/Views/Account/Register.cshtml 
-ASP.NET Core Web App MVC

- New Folder => Data + New Class (AppDbContext)
Dans cette Classe Inherited from  public class AppDbContext : IdentityDbContext<IdentityUser> (Package Entity frame work core a installer 8.0)
	public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) {}
	
- Directement Clique Droit sur dossier Models => Add Class Name(AppUser)
	  public class AppUser : IdentityUser
	{
     [StringLength(100)]
     [MaxLength(100)]
     [Required]
     public string? Name { get; set; }

     public string? Address { get; set; }
	}
	
	
- Retour sur AppDbContext et remplacer avec AppUser
	public class AppDbContext : IdentityDbContext<AppUser>
	
-Aller dans appsettings.json et ajouter:
  "AllowedHosts": "*",
  "ConnectionStrings": {
   
       "default": "Server=(localdb)\\mssqllocaldb;Database=CustomIdentityDB;Trusted_Connection=True;MultipleActiveResultSets=true;"

  }
}

- Aller dans Program.cs et ajouter: Installer Paket .Tool
var builder = WebApplication.CreateBuilder(args);

var connectionString = builder.Configuration.GetConnectionString("default");

// Add services to the container.
builder.Services.AddControllersWithViews();
builder.Services.AddDbContext<AppDbContext>(
    options => options.UseSqlServer(connectionString));

builder.Services.AddIdentity<AppUser,IdentityRole>(
    options =>
    {
        options.Password.RequiredUniqueChars = 0;
        options.Password.RequireUppercase = false;
        options.Password.RequiredLength = 8;
        options.Password.RequireNonAlphanumeric = false;
        options.Password.RequireLowercase = false;
    })
    .AddEntityFrameworkStores<AppDbContext>().AddDefaultTokenProviders();

var app = builder.Build();

- Nuget Console: add-migration Initial, apres update-database

- Add Folder ViewModels+ Add Class (LoginVM) + Add Class (RegisterVM)

- dans LoginVM:
    public class LoginVM
    {
        [Required(ErrorMessage ="Username is required.")]
        public string? Username { get; set; }

        [Required(ErrorMessage ="Password is required.")]
        [DataType(DataType.Password)]
        public string? Password { get; set; }

        [Display(Name ="Remember Me")]
        public bool RememberMe { get; set; }
    }
}

- Dans RegisterVM:
 public class RegisterVM
 {
     [Required]
     public string? Name { get; set; }
     [Required]
     [DataType(DataType.EmailAddress)]
     public string? Email { get; set; }
     [Required]
     [DataType(DataType.Password)]
     public string? Password { get; set; }

     [Compare("Password", ErrorMessage ="Passwords don't match.")]
	 [Display(Name = "Confirm Password")]
	 
	 [DataType(DataType.MultilineText)]
     public string? ConfirmPassword { get; set; }
 }
 
 - Ajouter dans Controller un Controller MVC Empty (Name: AccountController.cs)
 Remplacer dans code:
     public class AccountController : Controller
    {
        public IActionResult Login()
        {
            return View();
        }
        public IActionResult Register()
        {
            return View();
        }
        public IActionResult Logout()
        {
            return View();
        }
    }
}

- clique droit sur register, puis Ansicht hinzuf√ºgen (Scaffolded Item), laisser Ansicht(View + leer)
Lui donner le nom: Register. Effacer tout est mettre:
@using CustomIdentity.ViewModels
@model RegisterVM

- meme chose pour Login juste Ajouter VM apres @model et ajouter ce code aussi:
@using CustomIdentity.ViewModels
@model LoginVM

@{
    ViewData["Title"] = "Login";
}

<div class="row d-flex align-items-center justify-content-center">
    <div class="col-md-3 card p-3">
        <h2 class="text-center text-info">Login</h2>
        <form asp-action="Login" method="post" asp-route-returnurl="@ViewData["ReturnUrl"]">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="mb-1">
                <label asp-for="Username" class="control-label"></label>
                <input asp-for="Username" class="form-control" />
                <span asp-validation-for="Username" class="text-danger"></span>
            </div>
            <div class="mb-1">
                <label asp-for="Password" class="control-label"></label>
                <input asp-for="Password" class="form-control" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="mb-1 form-check">
                <label class="form-check-label">
                    <input asp-for="RememberMe" class="form-check-input" /> @Html.DisplayNameFor(a => a.RememberMe)
                </label>
            </div>
            <div class="row">
                <div class="col-8">
                    <a asp-action="Register" class="text-decoration-none float-start mt-2" asp-route-returnurl="@ViewData["ReturnUrl"]">Don't have account?</a>
                </div>
                <div class="col-4">
                    <input type="submit" value="Login" class="btn btn-primary btn-sm float-end" />
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}


- Puis aller sur Controllers => AccountController.cs:
using CustomIdentity.Models;
using CustomIdentity.ViewModels;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;

namespace CustomIdentity.Controllers
{
    public class AccountController : Controller
    {
        private readonly SignInManager<AppUser> signInManager;

        public AccountController(SignInManager<AppUser> signInManager)
        {
            this.signInManager = signInManager;
        }

        public IActionResult Login()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Login(LoginVM model)
        {
            if (ModelState.IsValid)
            {
                //login
              var result= await signInManager.PasswordSignInAsync(model.Username!,model.Password!,model.RememberMe,false);

                if (result.Succeeded) 
                {
                    return RedirectToAction("Index", "Home");
                }
                ModelState.AddModelError("", "Invalid logim attempt");
                return View(model);
            }
            return View(model);
        }

        public IActionResult Register()
        {
            return View();
        }

        public IActionResult Logout()
        {
            return View();
        }
    }
}


- se rendre dans HomeController.cs et ajouter [Authorize]:
namespace CustomIdentity.Controllers
{
    [Authorize]
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;
		
- - Maintenant aller a register.cshtml et coller le code:
@{
    ViewData["Title"] = "Register";
}

<div class="row d-flex align-items-center justify-content-center">
    <div class="col-md-4 card p-3">
        <h2 class="text-center text-info">Register</h2>
        <form asp-action="Register" method="post" asp-route-returnurl="@ViewData["ReturnUrl"]">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="mb-1">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="mb-1">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="mb-1">
                <label asp-for="Password" class="control-label"></label>
                <input asp-for="Password" class="form-control" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="mb-1">
                <label asp-for="ConfirmPassword" class="control-label"></label>
                <input asp-for="ConfirmPassword" class="form-control" />
                <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
            </div>
            <div class="mb-1">
                <label asp-for="Address" class="control-label"></label>
                <textarea asp-for="Address" class="form-control" rows="2"></textarea>
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>
            <div class="row">
                <div class="col-8">
                    <a asp-action="Login" asp-route-returnurl="@ViewData["ReturnUrl"]" class="text-decoration-none float-start mt-2">Have account?</a>
                </div>
                <div class="col-4">
                    <input type="submit" value="Register" class="btn btn-primary btn-sm float-end" />
                </div>
            </div>
        </form>
    </div>
</div>


@section Scripts{
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

- Modifier AccountController.cs en ce code:
using CustomIdentity.Models;
using CustomIdentity.ViewModels;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;

namespace CustomIdentity.Controllers
{
    public class AccountController : Controller
    {
        private readonly SignInManager<AppUser> signInManager;
        private readonly UserManager<AppUser>  userManager;

        public AccountController(SignInManager<AppUser> signInManager)
        {
            this.signInManager = signInManager;
            this.userManager = userManager;
        }

        public IActionResult Login()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Login(LoginVM model)
        {
            if (ModelState.IsValid)
            {
                //login
              var result= await signInManager.PasswordSignInAsync(model.Username!,model.Password!,model.RememberMe,false);

                if (result.Succeeded) 
                {
                    return RedirectToAction("Index", "Home");
                }
                ModelState.AddModelError("", "Invalid login attempt");
                return View(model);
            }
            return View(model);
        }

        public IActionResult Register()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Register(RegisterVM model)
        {
            if (ModelState.IsValid) 
            {
                AppUser user = new()
                {
                    Name = model.Name,
                    UserName = model.Email,
                    Email = model.Email
                };

                var result = await userManager.CreateAsync(user,model.Password!);

                if (result.Succeeded)
                {
                    await signInManager.SignInAsync(user, false);

                    return RedirectToAction("Index", "Home");
                }
                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError("", error.Description);
                }
            }
            return View();
        }

        public async Task<IActionResult> Logout()
        {
            await signInManager.SignOutAsync();
            return RedirectToAction(nameof(HomeController.Index));
        }
    }
}


- DAns Views => Shared => clique droit => Add view Leer (Name: _LoginPartial), puis ajouter ce code:
@using Microsoft.AspNetCore.Identity;
@inject SignInManager<AppUser> signInManager

<ul class="navbar-nav">
    @if (signInManager.IsSignedIn(User))
    {
        <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                @User.Identity!.Name!
            </a>
            <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                <li>
                    <a class="dropdown-item" asp-action="Logout" asp-controller="Account">
                        Logout
                    </a>
                </li>
            </ul>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="" asp-controller="Account" asp-action="Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="" asp-controller="Account" asp-action="Login">Login</a>
        </li>
    }
</ul>

- ajouter dans _Layout.cshtml apres la derniere <ul> ligne 29 
<partial name="_LoginPartial"/>

- 